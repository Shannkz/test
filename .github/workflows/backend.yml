name: Build and deploy Django Web Application

on:
  push:
    branches:
    - main
    # paths:
    # - 'backend/**'

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: events-ecr-dev

jobs:
  deploy:
    name: Copy repo files to S3 bucket for Frontend hosting
    runs-on: ubuntu-latest
    environment: AllEvents-Dev
    strategy:
      matrix:
        appname: ['AllEvents-Django-Web-App']
        deploy-group: ['allevents-django-deployment-group']
        s3-bucket: ['allevents-django-revision-dev']
        s3-filename: ['staging-aws-codedeploy-${{ github.sha }}']

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create and populate .env file
      env:
        DOT_ENV_FILE: ${{ secrets.DOT_ENV }}
      run: |
        cd backend/my_site
        touch .env
        echo $DOT_ENV_FILE | tr " " "\n" >> .env
        echo "cat .env"
        cat .env

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build and archive Docker images to be used by CodeDeploy
      id: build-image
      run: |
        cd backend
        docker build -t django-backend .
        mkdir deployable
        docker save django-backend | gzip -c > deployable/django_docker_image.tar.gz
        cp appspec.yml deployable/
        cp -r scripts deployable/

      # Deploy push to AWS S3
    - name: AWS Deploy push
      run: |
        aws deploy push \
        --application-name ${{ matrix.appname }} \
        --description "This is a revision for the ${{ matrix.appname }}-${{ github.sha }}" \
        --ignore-hidden-files \
        --s3-location s3://${{ matrix.s3-bucket }}/${{ matrix.s3-filename }}.zip \
        --source backend/deployable

    # Create deployment to CodeDeploy
    - name: AWS Create Deployment
      run: |
        aws deploy create-deployment \
          --application-name ${{ matrix.appname }} \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name ${{ matrix.deploy-group }} \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=${{ matrix.s3-bucket }},key=${{ matrix.s3-filename }}.zip,bundleType=zip